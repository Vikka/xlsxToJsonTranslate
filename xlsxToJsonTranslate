#!/usr/bin/env python3

from collections import OrderedDict
from getopt import getopt, GetoptError
from deepmerge import always_merger
from json import dumps
from unflatten import unflatten
from sys import argv, stderr
from xlrd import open_workbook


def createJSON(input_file, output_file, lang, keyColumn):
    sheet = open_workbook(input_file).sheet_by_index(0)
    translation = {}

    translationColumn = sheet.row_values(0).index(lang)

    for row_num in range(1, sheet.nrows):
        data = OrderedDict()
        row_values = sheet.row_values(row_num)
        data['translate_key'] = row_values[keyColumn]
        data['translation'] = row_values[translationColumn]

        t = unflatten({data['translate_key']: data['translation']})
        translation = always_merger.merge(translation, t)

    j = dumps(translation)

    with open(output_file, 'w') as f:
        f.write(j)
    print('\nSuccess, output written in ->', output_file)


if __name__ == "__main__":
    argv = argv[1:]
    input_file = str()
    output_file = 'fr.json'
    lang = 'fr'
    keyColumn = 1
    try:
        opts, args = getopt(argv, "hi:o:l:k",
                            ["ifile=", "ofile=", "lang=", "keycolumn="])
    except GetoptError as e:
        stderr.write(f'{type(e).__name__}: {e.msg}\n'
                     'Usage: xlsxToJsonTranslate -i <inputfile> '
                     f'[-o <outputfile: "{output_file}"> '
                     f'-l <lang: "{lang}"> '
                     f'-k <keycolumn: "{keyColumn}">]')
        exit(2)

    # noinspection PyUnboundLocalVariable
    for opt, arg in opts:
        if opt == '-h':
            print('xlsxToJsonTranslate -i <inputfile> '
                  f'[-o <outputfile: "{output_file}"> '
                  f'-l <lang: "{lang}"> '
                  f'-k <keycolumn: "{keyColumn}">]')
            exit()
        if opt in ("-i", "--ifile"):
            input_file = arg
        elif opt in ("-o", "--ofile"):
            output_file = arg
        elif opt in ("-l", "--lang"):
            lang = arg
        elif opt in ("-k", "--keycolumn"):
            keyColumn = arg
    if not input_file:
        stderr.write('No <inputfile>\n'
                     'Usage: xlsxToJsonTranslate -i <inputfile> '
                     f'[-o <outputfile: "{output_file}"> '
                     f'-l <lang: "{lang}"> '
                     f'-k <keycolumn: "{keyColumn}">]')
        exit(2)
    try:
        createJSON(input_file, output_file, lang, keyColumn)
    except FileNotFoundError as e:
        stderr.write(f'{type(e).__name__}: "{e.filename}" {e.strerror}')
        exit(1)
    print('Input file is :', input_file)
    print('Output file is :', output_file)
    print('Lang is :', lang)
    print('KeyColumn is :', keyColumn)
